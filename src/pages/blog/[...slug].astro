---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
export const prerender = true;
import { render } from "astro:content";
import FeatureFlag from "../../config/featureflag.json";
import ErrorPage from "../../components/React/404/ErrorPage";

try {
  if (!FeatureFlag.CaseLaw) {
    return Astro.redirect("/access-denied");
  }
} catch (error) {
  return Astro.redirect("/404");
}
export async function getStaticPaths() {
  try {
    const posts = await getCollection("blog");
    return posts.map((post) => ({
      params: { slug: post.id },
      props: post,
    }));
  } catch (error) {
    console.error("Error fetching blog posts:", error);
    return [];
  }
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;

if (!post || !post.data) {
  console.error("Invalid post data:", post);
  throw new Error("Blog post data is missing or corrupted.");
}

const { Content } = await render(post).catch((error) => {
  console.error("Error rendering content:", error);
  return { Content: null };
});

// Ensure required props have fallback values
const postData = {
  title: post.data.title ?? "Untitled Post",
  description: post.data.description ?? "No description available.",
  pubDate: post.data.pubDate ?? new Date(0),
  draft: post.data.draft ?? false,
  tags: post.data.tags ?? [],
};
---

<BlogPost {...postData}>
  {
    Content ? (
      <Content />
    ) : (
      <ErrorPage error="An unexpected error occurred. Please try again later." />
    )
  }
</BlogPost>
